apply plugin: 'java'

repositories {
    mavenCentral()
    mavenLocal()
}

jar {
    baseName = 'tutorial-java-testng-selenium'
    version =  '0.1.0-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
	testImplementation 'org.testng:testng:7.4.0'
    testImplementation 'app.getxray:xray-testng-extensions:0.1.0-SNAPSHOT'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.3.0'
}

/*
tasks.named('test') {
    useTestNG() {
// org.testng.reporters.XMLReporter:generateTestResultAttributes=true,generateGroupsAttribute=true

	useDefaultListeners = false
        listeners << 'org.testng.reporters.XMLReporter'
	//reporter = new org.testng.reporters.XMLReporter()
	var reporters = getListeners()
//	reporters.last().getConfig().setGenerateTestResultAttributes(true)
        //task.addTestListener(new org.testng.reporters.XMLReporter()) 
	//args '-reporter','org.testng.reporters.XMLReporter:generateTestResultAttributes=true,generateGroupsAttribute=true'
    }
    //options {
    //    listeners << 'org.testng.reporters.XMLReporter'
   // }
     // turn off Gradle's HTML report to avoid replacing the
     // reports generated by TestNG library:
     reports.html.required = false
}
*/


test {
    useTestNG() {
	 // report generation delegated to TestNG library:
         useDefaultListeners = true
    }
    reports {
         junitXml.required = false
         html.required = false
    }
    ignoreFailures = true
}


task testngTest(type: JavaExec, dependsOn: [classes]) {
    group 'Verification'
    description 'Run TestNG tests'
    mainClass = 'org.testng.TestNG'
    args('testng.xml', '-reporter',
            'org.testng.reporters.XMLReporter:generateTestResultAttributes=true,generateGroupsAttribute=true'
    )
    classpath = sourceSets.test.runtimeClasspath
}

task importResults(type: Exec) {
	apply from: "gradle/properties.gradle"

	commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: multipart/form-data', '-u', "${jiraUsername}:${jiraPassword}", '-F', 'file=@test-output//testng-results.xml', "${jiraBaseUrl}/rest/raven/2.0/import/execution/testng?projectKey=${projectKey}"
	//store the output instead of printing to the console:
	standardOutput = new ByteArrayOutputStream()
	ignoreExitValue = true

	doLast {
		if (execResult.getExitValue() != 0) {
			println "ERROR: problem importing results to Xray"
		} else {
			println "Results imported to Xray!"		
		}
		println  standardOutput.toString()	
     	}
}

task importResultsCloud() {
	apply from: "gradle/properties.gradle"

	def baseUrl = 'https://xray.cloud.getxray.app'

	//token=$(curl -H "Content-Type: application/json" -X POST --data @"cloud_auth.json" "$BASE_URL/api/v2/authenticate"| tr -d '"')
	doLast {

	        new ByteArrayOutputStream().withStream { os ->
        	    def result = exec {
					ignoreExitValue = true
					commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: application/json', '-X','POST', '--data', '@cloud_auth.json', "${baseUrl}/api/v2/authenticate"
					standardOutput = os
				}
				if (result.getExitValue() != 0) {
					println "ERROR: problem authenticating"
				} else {
					def token = os.toString().replaceAll("\"","")
					
					println "Authenticated with Xray!"

					new ByteArrayOutputStream().withStream { os2 ->
						def result2 = exec {
							ignoreExitValue = true
							commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: application/xml', '-X','POST', '-H', "Authorization: Bearer ${token}", '--data', '@test-output/testng-results.xml', "${baseUrl}/api/v2/import/execution/testng?projectKey=${projectKey}"
							standardOutput = os2
						}
						if (result2.getExitValue() != 0) {
							println "ERROR: problem importing results"
							println os2.toString()
						} else {
							println "Resuls imported to Xray!"
							println os2.toString()
						}
					}
				}
			}

     	}
}


